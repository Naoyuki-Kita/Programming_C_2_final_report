Maze	作成者：1116191025 喜多尚之

目次：
１．　概要
２．　遊び方
３．　穴掘り法について

１．概要
このプログラムは、穴掘り法を用いて作成された迷路で遊ぶプログラムです。


２．遊び方
・プログラムを実行すると、「MAZE by K.N. SELECT MODE」と表示されるので、1から3キーでモードを選んでください。難易度に応じて1～3のモードが選べます。
・キーを押すと、穴掘り法に基づいて迷路の作成が実行されます。
・作成が完了すると左上の方にプレイヤー(「人」で表現されています)、右下の方にゴール地点(「出」で表現されています)が配置されます。十字キーを使ってプレイヤーを移動させ、迷路を攻略しゴール地点にまで導いてください。
・ゴール地点につくと自動的に終了します。その際何回の移動でゴールにたどり着いたかが表示されます。
・迷路の形状と、何回の移動でゴールにたどり着いたかが「result.txt」に出力されます。


３．　穴掘り法について

i)アルゴリズム

・穴掘り法とは、迷路を作成するためのアルゴリズムです。例を挙げて説明します。
・まず、迷路のすべてのマスを壁で埋めます。(■…壁)

　■■■■■■
　■■■■■■
　■■■■■■
　■■■■■■
　■■■■■■
　■■■■■■

・次に、ランダムに座標が奇数のマスを1つ掘り、道にします。(○…今掘ったマス)

　■■■■■■
　■■■■■■
　■■■■■■
　■■■■■■
　■■■■○■
　■■■■■■

・堀ったマスについて、隣り合うマス(上下左右)から1つランダムに決め、掘ることができれば掘り、できなければ他のマスについて同様の作業をします。
　ここで、掘ることができるマスとは、以下の条件を満たすマスを指します。
	１．迷路の縁じゃない
	２．そのマスを掘ることで別の道とつながらない

　例えば、先ほどの状況でランダムに決めた結果、下のマスだったとすると、迷路の縁なので掘ることができません。

　■■■■■■
　■■■■■■
　■■■■■■
　■■■■■■
　■■■■　■
　■■■■■■
　　　　　↑迷路の縁なので無理

　よって、他のマスから同様にランダムに決めます。左のマスを試してみると、条件を満たしているので掘ることができます。

　■■■■■■
　■■■■■■
　■■■■■■
　■■■■■■
　■■■○　■
　■■■■■■

・前の処理で掘ったマスについて、同様に処理を行います。つまり、隣り合うマスからランダムに選び、掘ることができたら掘ります。

　■■■■■■
　■■■■■■
　■■■■■■
　■■■○■■
　■■■　　■
　■■■■■■

・すべてのマスについて掘ることができなくなるまで続けます。

　■■■■■■　　　■■■■■■　　　■■■■■■
　■■■■■■　　　■■■■■■　　　■■■■■■
　■■■■■■　→　■■■■■■　→　■■■■■■　→もう掘れない
　■■○　■■　　　■○　　■■　　　■　　　■■
　■■■　　■　　　■■■　　■　　　■○■　　■
　■■■■■■　　　■■■■■■　　　■■■■■■

・掘れなくなったら先ほど掘ったひとつ前のマスに戻り、他の方向で掘れないか試します。掘れたらそのまま進みます。(★…今いるマス)

　■■■■■■　　　■■■■■■　　　■■■■■■　　　■■■■■■
　■■■■■■　　　■■■■■■　　　■○■■■■　　　■　○■■■
　■■■■■■　→　■○■■■■　→　■　■■■■　→　■　■■■■
　■★　　■■　　　■　　　■■　　　■　　　■■　　　■　　　■■
　■　■　　■　　　■　■　　■　　　■　■　　■　　　■　■　　■
　■■■■■■　　　■■■■■■　　　■■■■■■　　　■■■■■■
　上に掘れる
　　　　　　　　　　■■■■■■　　　■■■■■■　　　■■■■■■
　　　　　　　　　　■　　○■■　　　■　　　○■　　　■　　　　■
　　　　　　　　→　■　■■■■　→　■　■■■■　→　■　■■○■　→もう掘れない
　　　　　　　　　　■　　　■■　　　■　　　■■　　　■　　　■■
　　　　　　　　　　■　■　　■　　　■　■　　■　　　■　■　　■
　　　　　　　　　　■■■■■■　　　■■■■■■　　　■■■■■■

・前の処理(ひとつ前のマスに戻って他の方向を確認)を繰り返していき、最初の地点の確認が完了したら終了です。

　■■■■■■　　　■■■■■■　　　　　　　■■■■■■　　　■■■■■■
　■　　　★■　　　■　　★　■　　　　　　　■　　　　■　　　■　　　　■
　■　■■　■　→　■　■■　■　→　…　→　■　■■　■　→　■　■■　■
　■　　　■■　　　■　　　■■　　　　　　　■　　　■■　　　■　　　■■
　■　■　　■　　　■　■　　■　　　　　　　■　■　★■　　　■　■　　■
　■■■■■■　　　■■■■■■　　　　　　　■■■■■■　　　■■■■■■
　もう掘れない　　　もう掘れない　　　　　　もう掘れないので…　　　完成！

ii)実装
dig関数とdig_maze関数を用いて実装しました。dig関数は掘ることができれば掘る関数、dig_mazeはdig関数を用いた再帰的関数です。
dig_maze関数の構造を簡単に説明します。
	1. 方向(上下左右)を指し示す配列をシャッフルします。
	2. 1.でシャッフルした配列に順番にアクセスし、その方向にある隣り合ったマスに対してdig関数を適用します。
	3. 掘ることができたら、そのマスに関してdig_maze関数を適用します。できなかったら何もしません。
例を挙げて説明します。

　■■■■■■
　■○■■■■
　■■■■■■

空いているマスに対してdig_maze関数を用います。すると
	1. 配列のシャッフル({UP, RIGHT, LEFT, DOWN}になったとします)
	2. UP→掘れない　RIGHT→掘れない　LEFT→掘れる　掘ってdig_maze関数を呼び出す

　　　　　　■■■■■■
　　　　　　■　○■■■
　　　　　　■■■■■■

		1. 配列のシャッフル({DOWN, LEFT, UP, RIGHT}とします)
		2. DOWN→掘れない　LEFT→掘れる　掘ってdig_maze関数を呼び出す

　　　　　　　　　　■■■■■■
　　　　　　　　　　■　　○■■
　　　　　　　　　　■■■■■■

			1. 配列のシャッフル({LEFT, UP, DOWN, RIGHT}とします)
			2. LEFT→掘れる　掘ってdig_maze関数を呼び出す

　　　　　　　　　　        ■■■■■■
　    　　  　 　 　　　　　■　　　○■
　　　    　  　 　 　　　　■■■■■■

				1. 配列のシャッフル({LEFT, RIGHT, UP, DOWN}とします)
				2. LEFT→掘れない　RIGHT→掘れない　UP→掘れない　DOWN→掘れない
				3. dig_maze関数を終了します

　　　　　　　　　　        ■■■■■■
　    　　  　 　 　　　　　■　　★　■
　　　    　  　 　 　　　　■■■■■■

			3. UP→掘れない　DOWN→掘れない　RIGHT→掘れない
			4. dig_maze関数を終了します

　　　　　　　　　　■■■■■■
　　　　　　　　　　■　★　　■
　　　　　　　　　　■■■■■■

		3. UP→掘れない　RIGHT→掘れない
		4. dig_maze関数を終了します

　　　　　　■■■■■■
　　　　　　■★　　　■
　　　　　　■■■■■■

	3. DOWN→掘れない
	4. dig_maze関数を終了します

以上のような挙動になります。アルゴリズムに忠実に動いていると思います。


